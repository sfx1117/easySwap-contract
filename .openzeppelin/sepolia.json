{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xcDb8c3ad532eA641cFb1862D332E3238a164210b",
    "txHash": "0x36bd81933054984a3a72a7a9a3a1f654f5af42cd4b354042b8cca86975d28ace"
  },
  "proxies": [
    {
      "address": "0xbBdA359F250761fA57C0fBeaF63c75Ba1A14767f",
      "txHash": "0x9eafa77f14e3a6f147ea8135eeb0663ab7ce8fc5d83fc5f576485db6a00dec8e",
      "kind": "transparent"
    },
    {
      "address": "0xcDd915BdDfE27f52fd7f2C59c3E592efD21dad64",
      "txHash": "0xa565c7d0291b6b803ee5cf3848e70f3603fd1e2fae5157e197f97af34a31587d",
      "kind": "transparent"
    },
    {
      "address": "0x827B2Eb914d2AaB14CA3C735dF0D73A220E59F3F",
      "txHash": "0x8b9549931110d723a87af895788205c822e2f84154a435bf59c0de9e97349d05",
      "kind": "transparent"
    },
    {
      "address": "0x9741f956d63B1A76343087d6072AE763fc463bf5",
      "txHash": "0xa967c1183ac629c65a7820d6173e78a6b457d434294c00c9cb32d42a5dfcea94",
      "kind": "transparent"
    }
  ],
  "impls": {
    "75a2574e2b91d06c3bd35f809b8c5fae7c101c6a15878bf325b05b6b5438fcac": {
      "address": "0x41D6e6CEDB6748FeC02063Ed85c90fe59E4FCFcc",
      "txHash": "0xcffe7686906724a6aec3d9f6b5466b6cf45d6a2d0ca26eec612208be1f7c1822",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [
          {
            "label": "orderBook",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "EasySwapVault",
            "src": "contracts\\EasySwapVault.sol:15"
          },
          {
            "label": "ETHBalance",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_userDefinedValueType(OrderKey)14271,t_uint256)",
            "contract": "EasySwapVault",
            "src": "contracts\\EasySwapVault.sol:16"
          },
          {
            "label": "NFTBalance",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_userDefinedValueType(OrderKey)14271,t_uint256)",
            "contract": "EasySwapVault",
            "src": "contracts\\EasySwapVault.sol:17"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)50_storage",
            "contract": "EasySwapVault",
            "src": "contracts\\EasySwapVault.sol:142"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_mapping(t_userDefinedValueType(OrderKey)14271,t_uint256)": {
            "label": "mapping(OrderKey => uint256)",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_userDefinedValueType(OrderKey)14271": {
            "label": "OrderKey",
            "numberOfBytes": "32",
            "underlying": "t_bytes32"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bool": {
            "label": "bool"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:24"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73"
            }
          ]
        }
      }
    },
    "947ccedb0e3f1344f1b9c353c8cb415f8706f09a6ca6b2dcd09b63e3ebde8574": {
      "address": "0xE876947d22AAD704e1aEA0297D58092666551e0b",
      "txHash": "0xfb52868345df8aa4a57a644438dfeb479d10f9c8343f334e208f71591b8d1bef",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [
          {
            "label": "orders",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_userDefinedValueType(OrderKey)14271,t_struct(DBOrder)14315_storage)",
            "contract": "OrderStorage",
            "src": "contracts\\OrderStorage.sol:17"
          },
          {
            "label": "priceTrees",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_mapping(t_enum(Side)14274,t_struct(Tree)14674_storage))",
            "contract": "OrderStorage",
            "src": "contracts\\OrderStorage.sol:20"
          },
          {
            "label": "orderQueues",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_mapping(t_enum(Side)14274,t_mapping(t_userDefinedValueType(Price)14652,t_struct(OrderQueue)14323_storage)))",
            "contract": "OrderStorage",
            "src": "contracts\\OrderStorage.sol:24"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)50_storage",
            "contract": "OrderStorage",
            "src": "contracts\\OrderStorage.sol:332"
          },
          {
            "label": "protocolShare",
            "offset": 0,
            "slot": "53",
            "type": "t_uint128",
            "contract": "ProtocolManager",
            "src": "contracts\\ProtocolManager.sol:14"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "54",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ProtocolManager",
            "src": "contracts\\ProtocolManager.sol:48"
          },
          {
            "label": "filledAmount",
            "offset": 0,
            "slot": "104",
            "type": "t_mapping(t_userDefinedValueType(OrderKey)14271,t_uint256)",
            "contract": "OrderValidator",
            "src": "contracts\\OrderValidator.sol:26"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "105",
            "type": "t_array(t_uint256)50_storage",
            "contract": "OrderValidator",
            "src": "contracts\\OrderValidator.sol:107"
          },
          {
            "label": "_vault",
            "offset": 0,
            "slot": "155",
            "type": "t_address",
            "contract": "EasySwapOrderBook",
            "src": "contracts\\EasySwapOrderBook.sol:69"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "156",
            "type": "t_array(t_uint256)50_storage",
            "contract": "EasySwapOrderBook",
            "src": "contracts\\EasySwapOrderBook.sol:652"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_enum(SaleKind)14277": {
            "label": "enum LibOrder.SaleKind",
            "members": [
              "FixedPriceForCollection",
              "FixedPriceForItem"
            ],
            "numberOfBytes": "1"
          },
          "t_enum(Side)14274": {
            "label": "enum LibOrder.Side",
            "members": [
              "List",
              "Bid"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_mapping(t_enum(Side)14274,t_mapping(t_userDefinedValueType(Price)14652,t_struct(OrderQueue)14323_storage)))": {
            "label": "mapping(address => mapping(enum LibOrder.Side => mapping(Price => struct LibOrder.OrderQueue)))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_enum(Side)14274,t_struct(Tree)14674_storage))": {
            "label": "mapping(address => mapping(enum LibOrder.Side => struct RedBlackTreeLibrary.Tree))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_enum(Side)14274,t_mapping(t_userDefinedValueType(Price)14652,t_struct(OrderQueue)14323_storage))": {
            "label": "mapping(enum LibOrder.Side => mapping(Price => struct LibOrder.OrderQueue))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_enum(Side)14274,t_struct(Tree)14674_storage)": {
            "label": "mapping(enum LibOrder.Side => struct RedBlackTreeLibrary.Tree)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_userDefinedValueType(OrderKey)14271,t_struct(DBOrder)14315_storage)": {
            "label": "mapping(OrderKey => struct LibOrder.DBOrder)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_userDefinedValueType(OrderKey)14271,t_uint256)": {
            "label": "mapping(OrderKey => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_userDefinedValueType(Price)14652,t_struct(Node)14664_storage)": {
            "label": "mapping(Price => struct RedBlackTreeLibrary.Node)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_userDefinedValueType(Price)14652,t_struct(OrderQueue)14323_storage)": {
            "label": "mapping(Price => struct LibOrder.OrderQueue)",
            "numberOfBytes": "32"
          },
          "t_struct(Asset)14284_storage": {
            "label": "struct LibOrder.Asset",
            "members": [
              {
                "label": "tokenId",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "collection",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amount",
                "type": "t_uint96",
                "offset": 20,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(DBOrder)14315_storage": {
            "label": "struct LibOrder.DBOrder",
            "members": [
              {
                "label": "order",
                "type": "t_struct(Order)14308_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "next",
                "type": "t_userDefinedValueType(OrderKey)14271",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(Node)14664_storage": {
            "label": "struct RedBlackTreeLibrary.Node",
            "members": [
              {
                "label": "parent",
                "type": "t_userDefinedValueType(Price)14652",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "left",
                "type": "t_userDefinedValueType(Price)14652",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "right",
                "type": "t_userDefinedValueType(Price)14652",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "red",
                "type": "t_uint8",
                "offset": 16,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Order)14308_storage": {
            "label": "struct LibOrder.Order",
            "members": [
              {
                "label": "side",
                "type": "t_enum(Side)14274",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "saleKind",
                "type": "t_enum(SaleKind)14277",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "maker",
                "type": "t_address",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "nft",
                "type": "t_struct(Asset)14284_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "price",
                "type": "t_userDefinedValueType(Price)14652",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "expiry",
                "type": "t_uint64",
                "offset": 16,
                "slot": "3"
              },
              {
                "label": "salt",
                "type": "t_uint64",
                "offset": 24,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(OrderQueue)14323_storage": {
            "label": "struct LibOrder.OrderQueue",
            "members": [
              {
                "label": "head",
                "type": "t_userDefinedValueType(OrderKey)14271",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "tail",
                "type": "t_userDefinedValueType(OrderKey)14271",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Tree)14674_storage": {
            "label": "struct RedBlackTreeLibrary.Tree",
            "members": [
              {
                "label": "root",
                "type": "t_userDefinedValueType(Price)14652",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "nodes",
                "type": "t_mapping(t_userDefinedValueType(Price)14652,t_struct(Node)14664_storage)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint128": {
            "label": "uint128",
            "numberOfBytes": "16"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          },
          "t_uint96": {
            "label": "uint96",
            "numberOfBytes": "12"
          },
          "t_userDefinedValueType(OrderKey)14271": {
            "label": "OrderKey",
            "numberOfBytes": "32",
            "underlying": "t_bytes32"
          },
          "t_userDefinedValueType(Price)14652": {
            "label": "Price",
            "numberOfBytes": "16",
            "underlying": "t_uint128"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_bool": {
            "label": "bool"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.EIP712": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_hashedName",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\EIP712Upgradeable.sol:39"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_hashedVersion",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\EIP712Upgradeable.sol:41"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\EIP712Upgradeable.sol:43"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_version",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\EIP712Upgradeable.sol:44"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\PausableUpgradeable.sol:21"
            }
          ],
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:43"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:24"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73"
            }
          ]
        }
      }
    }
  }
}
